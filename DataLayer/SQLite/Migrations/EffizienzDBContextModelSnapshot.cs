// <auto-generated />
using System;
using DataLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataLayer.SQLite.Migrations
{
    [DbContext(typeof(EffizienzDBContext))]
    partial class EffizienzDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("ModelLayer.Classes.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Archived")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserTextId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserTextId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("ModelLayer.Classes.DateSpan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("End")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Start")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("DateSpans");
                });

            modelBuilder.Entity("ModelLayer.Classes.DoubleTime", b =>
                {
                    b.Property<string>("Day")
                        .HasColumnType("TEXT");

                    b.Property<double>("Start")
                        .HasColumnType("REAL");

                    b.Property<double>("End")
                        .HasColumnType("REAL");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Day", "Start", "End");

                    b.HasIndex("CategoryId");

                    b.ToTable("Times");
                });

            modelBuilder.Entity("ModelLayer.Classes.Goal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ParentCategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ParentGoalId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlanId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserTextId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ParentCategoryId");

                    b.HasIndex("ParentGoalId");

                    b.HasIndex("PlanId");

                    b.HasIndex("UserTextId");

                    b.ToTable("Goals");
                });

            modelBuilder.Entity("ModelLayer.Classes.UserText", b =>
                {
                    b.Property<string>("Title")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.HasKey("Title");

                    b.ToTable("UserTexts");
                });

            modelBuilder.Entity("ModelLayer.Classes.WorkItem", b =>
                {
                    b.Property<TimeSpan>("Start")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("End")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GoalId")
                        .HasColumnType("INTEGER");

                    b.Property<TimeSpan>("Time")
                        .HasColumnType("TEXT");

                    b.HasKey("Start", "End", "Date");

                    b.HasIndex("CategoryId");

                    b.HasIndex("GoalId");

                    b.ToTable("WorkItems");
                });

            modelBuilder.Entity("ModelLayer.Classes.Category", b =>
                {
                    b.HasOne("ModelLayer.Classes.UserText", "UserText")
                        .WithMany()
                        .HasForeignKey("UserTextId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserText");
                });

            modelBuilder.Entity("ModelLayer.Classes.DoubleTime", b =>
                {
                    b.HasOne("ModelLayer.Classes.Category", "Category")
                        .WithMany("WorkPlan")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ModelLayer.Classes.Goal", b =>
                {
                    b.HasOne("ModelLayer.Classes.Category", "ParentCategory")
                        .WithMany("Children")
                        .HasForeignKey("ParentCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModelLayer.Classes.Goal", "ParentGoal")
                        .WithMany("Children")
                        .HasForeignKey("ParentGoalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModelLayer.Classes.DateSpan", "Plan")
                        .WithMany()
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModelLayer.Classes.UserText", "UserText")
                        .WithMany()
                        .HasForeignKey("UserTextId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParentCategory");

                    b.Navigation("ParentGoal");

                    b.Navigation("Plan");

                    b.Navigation("UserText");
                });

            modelBuilder.Entity("ModelLayer.Classes.WorkItem", b =>
                {
                    b.HasOne("ModelLayer.Classes.Category", "Category")
                        .WithMany("WorkHours")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModelLayer.Classes.Goal", "Goal")
                        .WithMany("WorkHours")
                        .HasForeignKey("GoalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Goal");
                });

            modelBuilder.Entity("ModelLayer.Classes.Category", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("WorkHours");

                    b.Navigation("WorkPlan");
                });

            modelBuilder.Entity("ModelLayer.Classes.Goal", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("WorkHours");
                });
#pragma warning restore 612, 618
        }
    }
}
