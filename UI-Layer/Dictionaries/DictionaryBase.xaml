<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
					xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
					xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
					xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
					mc:Ignorable="d">

	<ResourceDictionary.MergedDictionaries>
		<d:ResourceDictionary Source="DictionaryDataTemplates.xaml"/>
		<d:ResourceDictionary Source="/Effizienz;component/Themes/ThemeLight.xaml"/>
	</ResourceDictionary.MergedDictionaries>
	
	<!--#region General Resources -->
	<CornerRadius x:Key="StandardRadius" TopLeft="8" TopRight="8" BottomRight="8" BottomLeft="8"/>
	<Thickness x:Key="StandardPadding" Left="5" Top="5" Right="5" Bottom="5"/>
	<Color x:Key="Selected_Focused" >#87CEFA</Color>
	<Color x:Key="Selected_UnFocused">#b8e2fc</Color>
	<!--#endregion-->
	
	<!--#region TextBlock Styles -->

	<Style TargetType="{x:Type TextBlock}">
		<Setter Property="Margin" Value="0,2"/>
		<Setter Property="Foreground" Value="{DynamicResource Foreground}"/>
		<Setter Property="Background" Value="Transparent"/>
	</Style>

	<Style TargetType="{x:Type TextBlock}" x:Key="Title"
		   BasedOn="{StaticResource {x:Type TextBlock}}">
		<Setter Property="FontSize" Value="28"/>
		<Setter Property="FontWeight" Value="Black"/>
		<Setter Property="HorizontalAlignment" Value="Center"/>
		<Setter Property="VerticalAlignment" Value="Center"/>
	</Style>



	<!--#endregion-->

	<!--#region Border Styles -->
	
	<Style x:Key="BorderRounded" TargetType="{x:Type Border}" >
		<Style.Setters>
			<Setter Property="CornerRadius" Value="{DynamicResource StandardRadius}"/>
			<Setter Property="BorderThickness" Value="0"/>
			<Setter Property="Padding" Value="2"/>
		</Style.Setters>
	</Style>
	
	<!--#endregion-->

	<!--#region Button Styles -->
	
	<Style TargetType="{x:Type Button}">
		<Style.Setters>
			<Setter Property="Margin" Value="1"/>
			<Setter Property="Foreground" Value="{DynamicResource Foreground}"/>
			<Setter Property="Background" Value="{DynamicResource Back_1}"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type Button}">
						<Border Background="{TemplateBinding Background}" Style="{StaticResource BorderRounded}">
							<ContentPresenter VerticalAlignment="Center" HorizontalAlignment="Center"/>
						</Border>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style.Setters>
	</Style>

	<!--#endregion-->
	
	<!--#region ToggleButton Styles -->

	<Style TargetType="{x:Type ToggleButton}">
		<Style.Setters>
			<Setter Property="Margin" Value="1"/>
			<Setter Property="Foreground" Value="{DynamicResource Foreground}"/>
			<Setter Property="Background" Value="{DynamicResource Back_1}"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type ToggleButton}">
						<Border Background="{TemplateBinding Background}" Style="{StaticResource BorderRounded}">
							<ContentPresenter VerticalAlignment="Center" HorizontalAlignment="Center"/>
						</Border>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style.Setters>
	</Style>

	<Style x:Key="ExpandCollapseToggleStyle" TargetType="{x:Type ToggleButton}">
		<Setter Property="Focusable" Value="False" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ToggleButton}">
					<Grid Width="15" Height="13" Background="Transparent">
						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CheckStates">
								<VisualState x:Name="Checked">
									<Storyboard>
										<ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="Collapsed">
											<DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Hidden}" />
										</ObjectAnimationUsingKeyFrames>
										<ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="Expanded">
											<DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}" />
										</ObjectAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
								<VisualState x:Name="Unchecked" />
								<VisualState x:Name="Indeterminate" />
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
						<Path x:Name="Collapsed"
							  HorizontalAlignment="Left"
							  VerticalAlignment="Center"
							  Margin="1,1,1,1"
							  Data="M 4 0 L 8 4 L 4 8 Z">
							<Path.Fill>
								<SolidColorBrush Color="{DynamicResource ForegroundColor}" />
							</Path.Fill>
						</Path>
						<Path x:Name="Expanded"
							  HorizontalAlignment="Left"
							  VerticalAlignment="Center"
							  Margin="1,1,1,1"
							  Data="M 0 4 L 8 4 L 4 8 Z"
							  Visibility="Hidden">
							<Path.Fill>
								<SolidColorBrush Color="{DynamicResource ForegroundColor}" />
							</Path.Fill>
						</Path>
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	
	<!--#endregion-->

	<!--#region TreeView Styles -->
	<Style TargetType="{x:Type TreeView}">
		
		<Setter Property="Margin" Value="0"/>
		<Setter Property="OverridesDefaultStyle" Value="True"/>
		<Setter Property="SnapsToDevicePixels" Value="True" />

		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type TreeView}">
					<Border Style="{StaticResource BorderRounded}" Padding="{StaticResource StandardPadding}" Margin="0">
						<ScrollViewer Focusable="False" CanContentScroll="False"
									  HorizontalScrollBarVisibility="Disabled"
									  VerticalScrollBarVisibility="Auto">
							<ItemsPresenter Margin="0"/>
						</ScrollViewer>
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>

		<!-- Wenn die attachedProperty isVirtualizing gesetzt wird -->
		<Style.Triggers>
			<Trigger Property="VirtualizingPanel.IsVirtualizing" Value="true">
				<Setter Property="ItemsPanel">
					<Setter.Value>
						<ItemsPanelTemplate>
							<VirtualizingStackPanel/>
						</ItemsPanelTemplate>
					</Setter.Value>
				</Setter>
			</Trigger>
		</Style.Triggers>
	</Style>
	<!--#endregion-->

	<!--#region TreeViewItem Styles -->

	<Style TargetType="{x:Type TreeViewItem}">

		<Setter Property="Background" Value="{DynamicResource Back_2}" />
		<Setter Property="Foreground" Value="{DynamicResource Foreground}" />
		<Setter Property="SnapsToDevicePixels" Value="True"/>
		<Setter Property="Padding" Value="{StaticResource StandardPadding}"/>
		<Setter Property="Margin" Value="0,5"/>

		<Setter Property="HorizontalContentAlignment" 
				Value="{Binding Path=HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
		<Setter Property="VerticalContentAlignment" 
				Value="{Binding Path=VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />

		<Setter Property="Template">
			<Setter.Value>
				
				<ControlTemplate TargetType="{x:Type TreeViewItem}">
					<Grid Background="Transparent" >

						<!--#region GridDefinition -->
						<Grid.ColumnDefinitions>
							<ColumnDefinition MinWidth="19" Width="Auto"/>
							<ColumnDefinition Width="*" />
						</Grid.ColumnDefinitions>
						<Grid.RowDefinitions>
							<RowDefinition Height="Auto" />
							<RowDefinition Height="Auto" />
						</Grid.RowDefinitions>
						<!--#endregion-->


						<!--#region VisualStates -->
						<VisualStateManager.VisualStateGroups>

							<VisualStateGroup x:Name="SelectionStates">
								<VisualState x:Name="Selected">
									<Storyboard>
										<ColorAnimation Storyboard.TargetName="Border" Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)" 
														To="{StaticResource Selected_Focused}" Duration="0"/>
									</Storyboard>
								</VisualState>
								<VisualState x:Name="Unselected" />
								<VisualState x:Name="SelectedInactive">
									<Storyboard>
										<ColorAnimation Storyboard.TargetName="Border" Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)" 
														To="{StaticResource Selected_UnFocused}" Duration="0"/>
									</Storyboard>
								</VisualState>
							</VisualStateGroup>

							<VisualStateGroup x:Name="ExpansionStates">
								<VisualState x:Name="Expanded">
									<Storyboard>
										<ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="ItemsHost">
											<DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}" />
										</ObjectAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
								<VisualState x:Name="Collapsed" />
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
						<!--#endregion-->

						<!--#region Content -->
						<Border x:Name="Border" Style="{StaticResource BorderRounded}"
								Grid.Column="0" Grid.Row="0" Grid.ColumnSpan="3"
								Background="{TemplateBinding Background}"/>

						<ToggleButton x:Name="Expander"
									  Grid.Column="0" Grid.Row="0"
									  Style="{StaticResource ExpandCollapseToggleStyle}"
									  IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"/>
						<Border Grid.Column="1" Grid.Row="0"
								Background="Transparent" BorderThickness="0"
								Padding="{Binding Path=Padding, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}">
							<ContentPresenter x:Name="PART_Header"
											  ContentSource="Header"
											  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
											  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
						</Border>
						<ItemsPresenter x:Name="ItemsHost" 
										Grid.Row="1" Grid.Column="1"
										Visibility="Collapsed" />

						<!--#endregion-->

					</Grid>

					<!--#region Triggers -->
					<ControlTemplate.Triggers>
						<!-- Trigger to Hide Expander if empty -->
						<Trigger Property="HasItems" Value="false">
							<Setter TargetName="Expander" Property="Visibility" Value="Hidden" />
						</Trigger>
						<!-- Trigger to Set MinWidth if Headerless -->
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="HasHeader" Value="false" />
								<Condition Property="Width" Value="Auto" />
							</MultiTrigger.Conditions>
							<Setter TargetName="PART_Header" Property="MinWidth" Value="75" />
						</MultiTrigger>

						<!-- Trigger to Set MinHeight if Headerless -->
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="HasHeader" Value="false" />
								<Condition Property="Height" Value="Auto" />
							</MultiTrigger.Conditions>
							<Setter TargetName="PART_Header" Property="MinHeight" Value="19" />
						</MultiTrigger>
					</ControlTemplate.Triggers>
					<!--#endregion-->

				</ControlTemplate>
			</Setter.Value>
		</Setter>

	</Style>
	
	<!--#endregion-->

	<!--#region TabControl Styles -->

	<Style TargetType="{x:Type TabControl}">
		<Setter Property="BorderThickness" Value="0"/>
		<Setter Property="Background" Value="Transparent"/>
	</Style>

	<!-- Style für Tabs -->
	<Style TargetType="{x:Type TabItem}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type TabItem}">
					<!-- Setzt ein Grid als HintergrundPanel -->
					<Border Name="Bd" 
										Background="{DynamicResource Back_2}" 
										CornerRadius="{DynamicResource StandardRadius}"
										Padding="8,2">
						<ContentPresenter VerticalAlignment="Center"
													  HorizontalAlignment="Center"
													  ContentSource="Header"/>

						<!--#region VisualStates -->
						<VisualStateManager.VisualStateGroups>

							<VisualStateGroup x:Name="SelectionStates">
								<VisualState x:Name="Selected">
									<Storyboard>
										<ColorAnimation Storyboard.TargetName="Bd" Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)" 
														To="{StaticResource Selected_Focused}" Duration="0"/>
									</Storyboard>
								</VisualState>
								<VisualState x:Name="Unselected"/>
								<VisualState x:Name="SelectedInactive">
									<Storyboard>
										<ColorAnimation Storyboard.TargetName="Bd" Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)" 
														To="{StaticResource Selected_UnFocused}" Duration="0"/>
									</Storyboard>
								</VisualState>
							</VisualStateGroup>

						</VisualStateManager.VisualStateGroups>
						<!--#endregion-->
					</Border>

				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	

	<!--#endregion-->


</ResourceDictionary>