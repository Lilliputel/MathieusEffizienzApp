<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
					xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">


	<Color x:Key="GlyphColor">#FF444444</Color>

	<!--#region TreeView Style -->

	<Style x:Key="{x:Type TreeView}" TargetType="TreeView">
		<Setter Property="OverridesDefaultStyle" Value="True"/>
		<Setter Property="SnapsToDevicePixels" Value="True" />
		<Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
		<Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="TreeView">
					<Border Name="Border" CornerRadius="1" BorderThickness="1">
						<ScrollViewer Focusable="False" CanContentScroll="False">
							<ItemsPresenter/>
						</ScrollViewer>
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!--#endregion-->
		
	<!--#region ToggleStyles -->
	
	<Style x:Key="ExpandCollapseToggleStyle" TargetType="ToggleButton">
		<Setter Property="Focusable" Value="False" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="ToggleButton">
					<Grid Width="15" Height="13" Background="Transparent">
						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CheckStates">
								<VisualState x:Name="Checked">
									<Storyboard>
										<ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="Collapsed">
											<DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Hidden}" />
										</ObjectAnimationUsingKeyFrames>
										<ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="Expanded">
											<DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}" />
										</ObjectAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
								<VisualState x:Name="Unchecked" />
								<VisualState x:Name="Indeterminate" />
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
						<Path x:Name="Collapsed"
							  HorizontalAlignment="Left"
							  VerticalAlignment="Center"
							  Margin="1,1,1,1"
							  Data="M 4 0 L 8 4 L 4 8 Z">
							<Path.Fill>
								<SolidColorBrush Color="{DynamicResource GlyphColor}" />
							</Path.Fill>
						</Path>
						<Path x:Name="Expanded"
							  HorizontalAlignment="Left"
							  VerticalAlignment="Center"
							  Margin="1,1,1,1"
							  Data="M 0 4 L 8 4 L 4 8 Z"
							  Visibility="Hidden">
							<Path.Fill>
								<SolidColorBrush Color="{DynamicResource GlyphColor}" />
							</Path.Fill>
						</Path>
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	
	<!--#endregion-->

	<!--#region TreeView Item Style -->

	<Style x:Key="{x:Type TreeViewItem}" TargetType="{x:Type TreeViewItem}">
		<Setter Property="Background" Value="{DynamicResource Back_2}" />
		<Setter Property="HorizontalContentAlignment" Value="{Binding Path=HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
		<Setter Property="VerticalContentAlignment" Value="{Binding Path=VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />

		<Setter Property="Padding" Value="1,0,0,0" />
		<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />

		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type TreeViewItem}">
					<Grid x:Name="Hauptlänge" Background="Transparent">

						<!--#region GridDefinition -->
						<Grid.ColumnDefinitions>
							<ColumnDefinition MinWidth="19" Width="Auto"/>
							<ColumnDefinition Width="Auto" />
							<ColumnDefinition Width="*" />
						</Grid.ColumnDefinitions>
						<Grid.RowDefinitions>
							<RowDefinition Height="Auto" />
							<RowDefinition />
						</Grid.RowDefinitions>
						<!--#endregion-->


						<!--#region VisualStates -->
						<VisualStateManager.VisualStateGroups>

							<VisualStateGroup x:Name="SelectionStates">
								<VisualState x:Name="Selected">
									<Storyboard>
										<ColorAnimation Storyboard.TargetName="Bd" Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)" 
														To="{StaticResource Selected_Focused}" Duration="0"/>
									</Storyboard>
								</VisualState>
								<VisualState x:Name="Unselected" />
								<VisualState x:Name="SelectedInactive">
									<Storyboard>
										<ColorAnimation Storyboard.TargetName="Bd" Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)" 
														To="{StaticResource Selected_UnFocused}" Duration="0"/>
									</Storyboard>
								</VisualState>
							</VisualStateGroup>
							
							<VisualStateGroup x:Name="ExpansionStates">
								<VisualState x:Name="Expanded">
									<Storyboard>
										<ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="ItemsHost">
											<DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}" />
										</ObjectAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
								<VisualState x:Name="Collapsed" />
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
						<!--#endregion-->

						<!--#region Content -->
						<Border x:Name="Bd" Grid.Column="0" Grid.Row="0" Grid.ColumnSpan="3" Background="{TemplateBinding Background}" CornerRadius="{DynamicResource StandardRadius}"/>

						<ToggleButton x:Name="Expander"
									  Grid.Column="0"
									  Grid.Row="0"
									  Style="{StaticResource ExpandCollapseToggleStyle}" 
									  ClickMode="Press" 
									  IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"
									  Margin="6,0,0,0"/>
						<Border Grid.Column="1" 
								Grid.Row="0"
								Background="Transparent" 
								BorderBrush="{TemplateBinding BorderBrush}" 
								BorderThickness="{TemplateBinding BorderThickness}" 
								Padding="{TemplateBinding Padding}">
							<ContentPresenter x:Name="PART_Header"
											  ContentSource="Header"
											  HorizontalAlignment="Stretch"/>
						</Border>
						<ItemsPresenter x:Name="ItemsHost" 
										Grid.Row="1" 
										Grid.Column="1" 
										Grid.ColumnSpan="2" 
										Visibility="Collapsed" />
						
						<!--#endregion-->

					</Grid>

					<!--#region Triggers -->
					<ControlTemplate.Triggers>
						<!-- Trigger to Hide Expander if empty -->
						<Trigger Property="HasItems" Value="false">
							<Setter TargetName="Expander" Property="Visibility" Value="Hidden" />
						</Trigger>
						<!-- Trigger to Set MinWidth if Headerless -->
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="HasHeader" Value="false" />
								<Condition Property="Width" Value="Auto" />
							</MultiTrigger.Conditions>
							<Setter TargetName="PART_Header" Property="MinWidth" Value="75" />
						</MultiTrigger>

						<!-- Trigger to Set MinHeight if Headerless -->
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="HasHeader" Value="false" />
								<Condition Property="Height" Value="Auto" />
							</MultiTrigger.Conditions>
							<Setter TargetName="PART_Header" Property="MinHeight" Value="19" />
						</MultiTrigger>
					</ControlTemplate.Triggers>
					<!--#endregion-->
					
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	
	<!--#endregion-->
	
</ResourceDictionary>